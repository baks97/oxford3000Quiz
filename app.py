# –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∫–æ–¥–∞ –∫–≤–∏–∑–∞ –≤ –≤–∏–¥–µ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞, —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
quiz_code = """
import streamlit as st
import random
import json
import os

MD_FILE = "quiz.md"
STATS_FILE = "stats.json"

# –ß—Ç–µ–Ω–∏–µ –∏ –ø–∞—Ä—Å–∏–Ω–≥ MD-—Ñ–∞–π–ª–∞
def parse_md_file(filename):
    with open(filename, "r", encoding="utf-8") as f:
        lines = [line.strip() for line in f if line.strip()]
    
    words = []
    i = 0
    while i < len(lines):
        if lines[i].startswith("## üî§ "):
            word_entry = {
                "word": lines[i][5:].strip(),
                "transcription": lines[i+1] if i+1 < len(lines) else "",
                "part_of_speech": lines[i+2] if i+2 < len(lines) else "",
                "examples": "",
                "extra": "",
            }

            for j in range(i+3, len(lines)):
                if lines[j].startswith("### üßæ"):
                    examples_start = j
                    break
            else:
                examples_start = None

            for j in range(i+1, len(lines)):
                if lines[j].startswith("## üî§ "):
                    next_word_start = j
                    break
            else:
                next_word_start = len(lines)

            if examples_start is not None:
                word_entry["examples"] = "\\n".join(lines[examples_start:next_word_start])
                word_entry["extra"] = "\\n".join(lines[i+3:examples_start])
            else:
                word_entry["examples"] = ""
                word_entry["extra"] = "\\n".join(lines[i+3:next_word_start])

            words.append(word_entry)
            i = next_word_start
        else:
            i += 1
    return words

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: —á—Ç–µ–Ω–∏–µ –∏ –∑–∞–ø–∏—Å—å
def load_stats():
    if os.path.exists(STATS_FILE):
        with open(STATS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

def save_stats(stats):
    with open(STATS_FILE, "w", encoding="utf-8") as f:
        json.dump(stats, f, ensure_ascii=False, indent=2)

# –ù–∞—á–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
if "page" not in st.session_state:
    st.session_state.page = "start"
if "words" not in st.session_state:
    st.session_state.words = []
if "index" not in st.session_state:
    st.session_state.index = 0
if "show" not in st.session_state:
    st.session_state.show = False
if "answers" not in st.session_state:
    st.session_state.answers = []
if "stats" not in st.session_state:
    st.session_state.stats = load_stats()
if "seed" not in st.session_state:
    st.session_state.seed = None

# –°—Ç–∞—Ä—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
if st.session_state.page == "start":
    st.title("üß† –ê–Ω–≥–ª–∏–π—Å–∫–∏–π –∫–≤–∏–∑ –ø–æ —Å–ª–æ–≤–∞–º")
    st.subheader("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤:")

    col1, col2, col3, col4 = st.columns(4)
    for col, n in zip([col1, col2, col3, col4], [7, 15, 20, 25]):
        with col:
            if st.button(f"{n} —Å–ª–æ–≤"):
                st.session_state.seed = random.randint(1, 999999)
                random.seed(st.session_state.seed)
                all_words = parse_md_file(MD_FILE)
                st.session_state.words = random.sample(all_words, n)
                st.session_state.page = "quiz"
                st.session_state.index = 0
                st.session_state.answers = []
                st.session_state.show = False
                st.experimental_rerun()

    st.write("üìÇ –ò–ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤")
    if st.button("–ü–æ–∫–∞–∑–∞—Ç—å –≤–µ—Å—å —Ñ–∞–π–ª"):
        st.session_state.page = "full"
        st.experimental_rerun()

    if st.button("üìä –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"):
        st.session_state.page = "stats"
        st.experimental_rerun()

# –ö–≤–∏–∑
elif st.session_state.page == "quiz":
    word = st.session_state.words[st.session_state.index]

    st.markdown(f"## {word['word']}")
    st.markdown(f"**{word['transcription']}**")
    st.markdown(f"*{word['part_of_speech']}*")
    st.markdown("---")
    st.markdown("### üßæ –ü—Ä–∏–º–µ—Ä—ã (Oxford)")
    st.markdown(word['examples'])

    if st.session_state.show:
        st.markdown(word['extra'])

    col1, col2, col3 = st.columns([1,2,1])
    with col1:
        if st.button("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ"):
            st.session_state.answers.append((word['word'], False))
            st.session_state.stats.setdefault(word['word'], {"right": 0, "wrong": 0})
            st.session_state.stats[word['word']]["wrong"] += 1
            save_stats(st.session_state.stats)
            st.session_state.index += 1
            st.session_state.show = False
    with col2:
        if st.button("üëÅ –ü–æ–∫–∞–∑–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ" if not st.session_state.show else "üôà –°–∫—Ä—ã—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ"):
            st.session_state.show = not st.session_state.show
    with col3:
        if st.button("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ"):
            st.session_state.answers.append((word['word'], True))
            st.session_state.stats.setdefault(word['word'], {"right": 0, "wrong": 0})
            st.session_state.stats[word['word']]["right"] += 1
            save_stats(st.session_state.stats)
            st.session_state.index += 1
            st.session_state.show = False

    if st.session_state.index >= len(st.session_state.words):
        st.session_state.page = "result"
        st.experimental_rerun()

# –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
elif st.session_state.page == "result":
    st.title("üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã")
    for word, correct in st.session_state.answers:
        if correct:
            st.success(word)
        else:
            st.error(word)
            full = next((w for w in st.session_state.words if w['word'] == word), None)
            if full:
                st.markdown(f"**{full['transcription']}**")
                st.markdown(f"*{full['part_of_speech']}*")
                st.markdown("### üßæ –ü—Ä–∏–º–µ—Ä—ã (Oxford)")
                st.markdown(full['examples'])
                st.markdown(full['extra'])

    if st.button("üîÅ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"):
        st.session_state.page = "start"
        st.experimental_rerun()

# –ü–æ–∫–∞–∑ –≤—Å–µ–≥–æ —Ñ–∞–π–ª–∞
elif st.session_state.page == "full":
    st.title("üìö –í—Å–µ —Å–ª–æ–≤–∞")
    all_words = parse_md_file(MD_FILE)
    for word in sorted(all_words, key=lambda w: w['word']):
        st.markdown(f"## {word['word']}")
        st.markdown(f"**{word['transcription']}**")
        st.markdown(f"*{word['part_of_speech']}*")
        st.markdown("### üßæ –ü—Ä–∏–º–µ—Ä—ã (Oxford)")
        st.markdown(word['examples'])
        st.markdown(word['extra'])
        st.markdown("---")
    if st.button("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"):
        st.session_state.page = "start"
        st.experimental_rerun()

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
elif st.session_state.page == "stats":
    st.title("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–ª–æ–≤–∞–º")
    if st.session_state.stats:
        for word, data in st.session_state.stats.items():
            st.write(f"**{word}** ‚Äî ‚úÖ {data['right']} / ‚ùå {data['wrong']}")
    else:
        st.info("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –ø—É—Å—Ç–∞.")
    if st.button("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"):
        st.session_state.page = "start"
        st.experimental_rerun()
"""

# –°–æ—Ö—Ä–∞–Ω—è–µ–º —ç—Ç–æ—Ç –∫–æ–¥ –≤ —Ñ–∞–π–ª
with open("/mnt/data/oxford_quiz_app.py", "w", encoding="utf-8") as f:
    f.write(quiz_code)

"/mnt/data/oxford_quiz_app.py"
