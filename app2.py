import streamlit as st
import random
import re
from pathlib import Path

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–ª–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
def parse_words(md_text):
    entries = md_text.split("## üî§ ")
    words = [entry.strip() for entry in entries if entry.strip()]
    return words

# –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
def main_screen():
    st.title("–£—á–∏—Ç—å —Å–ª–æ–≤–∞ üìö")
    if st.button("üöÄ –ù–∞—á–∞—Ç—å —É—á–∏—Ç—å —Å–ª–æ–≤–∞"):
        st.session_state["screen"] = "study"
        st.session_state["current_index"] = 0
        st.session_state["shuffled_words"] = random.sample(st.session_state["words"], k=50)
        st.rerun()

# –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–∑—É—á–µ–Ω–∏—è —Å–ª–æ–≤
def study_screen():
    index = st.session_state["current_index"]
    words = st.session_state["shuffled_words"]

    if index < len(words):
        word_md = "## üî§ " + words[index]
        with st.container(border=True):
            st.markdown(word_md, unsafe_allow_html=True)

        col1, col2 = st.columns([1, 1])
        with col1:
            if st.button("‚û°Ô∏è –í–ø–µ—Ä—ë–¥"):
                st.session_state["current_index"] += 1
                st.rerun()
        with col2:
            if st.button("üè† –ù–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω"):
                st.session_state["screen"] = "main"
                st.rerun()
    else:
        st.subheader("üéâ –í—ã –≤—ã—É—á–∏–ª–∏ –≤—Å–µ 50 —Å–ª–æ–≤!")
        for entry in words:
            match = re.match(r"(.*?)\n", entry)
            word = match.group(1).strip() if match else "–ù–µ –Ω–∞–π–¥–µ–Ω–æ"
            st.markdown(f"- **{word}**")

        if st.button("üîÅ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"):
            st.session_state["screen"] = "main"
            st.rerun()

# –ù–∏–∂–Ω—è—è –ø–ª–∞—à–∫–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏ –ø–æ–¥–ø–∏—Å—å—é
def footer():
    st.markdown("---")
    cols = st.columns([1, 8])
    with cols[0]:
        st.image("lion.png", width=45)
    with cols[1]:
        st.markdown("<p style='text-align: center; font-style: italic;'>—Å –ª—é–±–æ–≤—å—é –æ—Ç –ª—å–≤—ë–Ω–∫–∞ ‚ù§Ô∏è</p>", unsafe_allow_html=True)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
def initialize():
    if "screen" not in st.session_state:
        st.session_state["screen"] = "main"
    if "words" not in st.session_state:
        md_path = Path("words.md")
        if not md_path.exists():
            st.error("–§–∞–π–ª words.md –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        with open(md_path, encoding="utf-8") as f:
            content = f.read()
        st.session_state["words"] = parse_words(content)

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
def main():
    # –ù–∞–¥–µ–∂–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    if "words" not in st.session_state:
        md_path = Path("quiz.md")
        if not md_path.exists():
            st.error("–§–∞–π–ª words.md –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        with open(md_path, encoding="utf-8") as f:
            content = f.read()
        st.session_state["words"] = parse_words(content)

    if "screen" not in st.session_state:
        st.session_state["screen"] = "main"

    if "current_index" not in st.session_state:
        st.session_state["current_index"] = 0

    if st.session_state["screen"] == "main":
        main_screen()
    elif st.session_state["screen"] == "study":
        study_screen()

    footer()

if __name__ == "__main__":
    main()
