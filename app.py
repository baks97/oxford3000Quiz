import streamlit as st
import random
import json
from pathlib import Path

MD_FILE = "quiz.md"
STATS_FILE = "stats.json"

# =================== –ü–∞—Ä—Å–∏–Ω–≥ markdown =========================
def parse_md_file(filename):
    with open(filename, "r", encoding="utf-8") as f:
        content = f.read()

    entries = content.strip().split("## üî§ ")
    words = []
    for entry in entries[1:]:
        lines = entry.strip().splitlines()
        if len(lines) < 3:
            continue  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–ø–æ–ª–Ω—ã–π –±–ª–æ–∫

        word = lines[0].strip()
        transcription = lines[1].strip()
        part_of_speech = lines[2].strip()

        example_start = next((i for i, line in enumerate(lines) if line.strip().startswith("### üßæ")), None)
        rest_info = "\n".join(lines[3:example_start]) if example_start else ""
        examples = "\n".join(lines[example_start:]) if example_start else ""

        words.append({
            "word": word,
            "transcription": transcription,
            "pos": part_of_speech,
            "rest": rest_info,
            "examples": examples
        })

    return words

# =================== –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ =========================
def load_stats():
    if Path(STATS_FILE).exists():
        with open(STATS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

def save_stats(stats):
    with open(STATS_FILE, "w", encoding="utf-8") as f:
        json.dump(stats, f, ensure_ascii=False, indent=2)

# =================== Streamlit –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å =========================

st.set_page_config(page_title="–ê–Ω–≥–ª–∏–π—Å–∫–∏–π –ö–≤–∏–∑", layout="centered")

if "page" not in st.session_state:
    st.session_state.page = "menu"
    st.session_state.words = []
    st.session_state.current = 0
    st.session_state.correct = []
    st.session_state.incorrect = []
    st.session_state.show = False

words_all = parse_md_file(MD_FILE)

# ===== –ì–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω =====
if st.session_state.page == "menu":
    st.title("üß† –ê–Ω–≥–ª–∏–π—Å–∫–∏–π –∫–≤–∏–∑ –ø–æ —Å–ª–æ–≤–∞–º")
    st.write("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤:")

    col1, col2, col3, col4 = st.columns(4)
    for col, n in zip([col1, col2, col3, col4], [7, 15, 20, 25]):
        if col.button(f"{n} —Å–ª–æ–≤"):
            selected = random.sample(words_all, n)
            st.session_state.words = selected
            st.session_state.page = "quiz"
            st.session_state.current = 0
            st.session_state.correct = []
            st.session_state.incorrect = []
            st.session_state.show = False
            st.experimental_rerun()

    st.markdown("### üìä –ò–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
    if st.button("–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"):
        st.session_state.page = "stats"
        st.experimental_rerun()

    if st.button("–ü–æ–∫–∞–∑–∞—Ç—å –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤"):
        st.session_state.page = "all_words"
        st.experimental_rerun()

# ===== –≠–∫—Ä–∞–Ω –∫–≤–∏–∑–∞ =====
elif st.session_state.page == "quiz":
    idx = st.session_state.current
    word = st.session_state.words[idx]

    st.markdown(f"## üî§ {word['word']}")
    st.markdown(word['transcription'])
    st.markdown(word['pos'])
    st.markdown("### üßæ –ü—Ä–∏–º–µ—Ä—ã (Oxford)")
    st.markdown(word['examples'])

    col1, col2, col3 = st.columns([1, 1, 1])

    with col1:
        if st.button("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ", key=f"right_{idx}"):
            st.session_state.correct.append(word['word'])
            st.session_state.current += 1
            st.session_state.show = False
            st.experimental_rerun()

    with col2:
        if st.button("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ", key=f"wrong_{idx}"):
            st.session_state.incorrect.append(word['word'])
            st.session_state.current += 1
            st.session_state.show = False
            st.experimental_rerun()

    with col3:
        if st.button("üëÅ –ü–æ–∫–∞–∑–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ" if not st.session_state.show else "üôà –°–∫—Ä—ã—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ", key=f"show_{idx}"):
            st.session_state.show = not st.session_state.show
            st.experimental_rerun()

    if st.session_state.show:
        st.markdown(word["rest"])

    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    if st.session_state.current >= len(st.session_state.words):
        # –æ–±–Ω–æ–≤–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = load_stats()
        for w in st.session_state.correct:
            stats.setdefault(w, {"right": 0, "wrong": 0})
            stats[w]["right"] += 1
        for w in st.session_state.incorrect:
            stats.setdefault(w, {"right": 0, "wrong": 0})
            stats[w]["wrong"] += 1
        save_stats(stats)

        st.session_state.page = "results"
        st.experimental_rerun()

# ===== –†–µ–∑—É–ª—å—Ç–∞—Ç—ã =====
elif st.session_state.page == "results":
    st.title("üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã")

    st.success(f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö: {len(st.session_state.correct)}")
    st.error(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö: {len(st.session_state.incorrect)}")

    if st.session_state.incorrect:
        st.markdown("### ‚ùó –°–ª–æ–≤–∞ —Å –æ—à–∏–±–∫–∞–º–∏:")
        for word in st.session_state.words:
            if word["word"] in st.session_state.incorrect:
                st.markdown(f"**{word['word']}** {word['transcription']} {word['pos']}")
                st.markdown(word["examples"])
                st.markdown(word["rest"])

    if st.button("üîÅ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"):
        st.session_state.page = "menu"
        st.experimental_rerun()

# ===== –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ =====
elif st.session_state.page == "stats":
    st.title("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    stats = load_stats()
    for word in sorted(stats.keys()):
        entry = stats[word]
        st.markdown(f"**{word}** ‚Äî ‚úÖ {entry['right']} / ‚ùå {entry['wrong']}")
    if st.button("üîô –ù–∞–∑–∞–¥"):
        st.session_state.page = "menu"
        st.experimental_rerun()

# ===== –í–µ—Å—å —Å–ø–∏—Å–æ–∫ =====
elif st.session_state.page == "all_words":
    st.title("üìö –í–µ—Å—å —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤")
    for word in sorted(words_all, key=lambda w: w["word"].lower()):
        st.markdown(f"## üî§ {word['word']}")
        st.markdown(word['transcription'])
        st.markdown(word['pos'])
        st.markdown("### üßæ –ü—Ä–∏–º–µ—Ä—ã (Oxford)")
        st.markdown(word['examples'])
        st.markdown(word["rest"])
        st.markdown("---")
    if st.button("üîô –ù–∞–∑–∞–¥"):
        st.session_state.page = "menu"
        st.experimental_rerun()
