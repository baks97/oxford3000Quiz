# –ò–º–ø–æ—Ä—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
import streamlit as st
import random
import json
import os
import time

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
MD_FILE = "quiz.md"
STATS_FILE = "stats.json"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ markdown-—Ñ–∞–π–ª–∞
def parse_md_file(filename):
    with open(filename, "r", encoding="utf-8") as f:
        content = f.read()

    entries = content.strip().split("## üî§ ")
    words = []
    for entry in entries[1:]:
        lines = entry.strip().splitlines()
        if len(lines) < 3:
            continue

        word = lines[0].strip()
        transcription = lines[1].strip()
        part_of_speech = lines[2].strip()

        example_start = next((i for i, line in enumerate(lines) if line.startswith("### üßæ")), None)
        cambridge_start = next((i for i, line in enumerate(lines) if line.startswith("### üåç")), None)

        if example_start is None:
            continue

        examples = "\n".join(lines[example_start : cambridge_start if cambridge_start else None])
        rest_info = "\n".join(lines[3 : example_start])
        cambridge_info = "\n".join(lines[cambridge_start:]) if cambridge_start else ""

        words.append({
            "word": word,
            "transcription": transcription,
            "pos": part_of_speech,
            "examples": examples,
            "rest": rest_info,
            "cambridge": cambridge_info
        })

    return words

# –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
def load_stats():
    if os.path.exists(STATS_FILE):
        with open(STATS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

def save_stats(stats):
    with open(STATS_FILE, "w", encoding="utf-8") as f:
        json.dump(stats, f, ensure_ascii=False, indent=2)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è session_state
if "page" not in st.session_state:
    st.session_state.page = "start"
if "words" not in st.session_state:
    st.session_state.words = []
if "index" not in st.session_state:
    st.session_state.index = 0
if "answers" not in st.session_state:
    st.session_state.answers = []
if "show" not in st.session_state:
    st.session_state.show = False
if "stats" not in st.session_state:
    st.session_state.stats = load_stats()
if "view_all" not in st.session_state:
    st.session_state.view_all = False

# –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
if st.session_state.page == "start":
    st.markdown("## üß† –ê–Ω–≥–ª–∏–π—Å–∫–∏–π –∫–≤–∏–∑ –ø–æ —Å–ª–æ–≤–∞–º\n")
    st.write("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤:")
    col1, col2, col3, col4 = st.columns(4)
    for i, num in enumerate([7, 15, 20, 25]):
        with [col1, col2, col3, col4][i]:
            if st.button(str(num)):
                st.session_state.words = random.sample(parse_md_file(MD_FILE), num)
                st.session_state.index = 0
                st.session_state.answers = []
                st.session_state.show = False
                st.session_state.page = "quiz"
                time.sleep(0.01)
                st.experimental_rerun()

    st.write("–ò–ª–∏:")
    if st.button("üìÇ –ü–æ–∫–∞–∑–∞—Ç—å –≤–µ—Å—å —Ñ–∞–π–ª"):
        st.session_state.words = sorted(parse_md_file(MD_FILE), key=lambda x: x['word'])
        st.session_state.index = 0
        st.session_state.view_all = True
        st.session_state.page = "quiz"
        time.sleep(0.01)
        st.experimental_rerun()

    if st.button("üìä –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"):
        st.session_state.page = "stats"
        st.experimental_rerun()

# –ö–≤–∏–∑
elif st.session_state.page == "quiz":
    words = st.session_state.words
    i = st.session_state.index

    word = words[i]
    st.markdown(f"### {word['word']}")
    st.markdown(word['transcription'])
    st.markdown(f"*{word['pos']}*")
    st.markdown(word['examples'])  # –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å üßæ

    # –ö–æ–ª–æ–Ω–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
    col1, col2, col3 = st.columns([1, 1, 1])

    with col1:
        if st.button("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ"):
            st.session_state.answers.append((word['word'], True))
            st.session_state.stats[word['word']] = st.session_state.stats.get(word['word'], {"right": 0, "wrong": 0})
            st.session_state.stats[word['word']]["right"] += 1
            save_stats(st.session_state.stats)
            if i + 1 < len(words):
                st.session_state.index += 1
                st.session_state.show = False
            else:
                st.session_state.page = "result"
            st.experimental_rerun()

    with col2:
        label = "üîΩ –ü–æ–∫–∞–∑–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ" if not st.session_state.show else "üîº –°–∫—Ä—ã—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ"
        if st.button(label):
            st.session_state.show = not st.session_state.show
            st.experimental_rerun()

    with col3:
        if st.button("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ"):
            st.session_state.answers.append((word['word'], False))
            st.session_state.stats[word['word']] = st.session_state.stats.get(word['word'], {"right": 0, "wrong": 0})
            st.session_state.stats[word['word']]["wrong"] += 1
            save_stats(st.session_state.stats)
            if i + 1 < len(words):
                st.session_state.index += 1
                st.session_state.show = False
            else:
                st.session_state.page = "result"
            st.experimental_rerun()

    if st.session_state.show:
        st.markdown(word["rest"])
        st.markdown(word["cambridge"])

# –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
elif st.session_state.page == "result":
    st.markdown("## üìù –†–µ–∑—É–ª—å—Ç–∞—Ç—ã")
    correct = [w for w, res in st.session_state.answers if res]
    incorrect = [w for w, res in st.session_state.answers if not res]

    st.success(f"–ü—Ä–∞–≤–∏–ª—å–Ω–æ: {len(correct)}")
    st.error(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ: {len(incorrect)}")

    if incorrect:
        with st.expander("‚ùó –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞"):
            for word in [w for w, res in st.session_state.answers if not res]:
                wdata = next(item for item in st.session_state.words if item['word'] == word)
                st.markdown(f"### {wdata['word']}")
                st.markdown(wdata['transcription'])
                st.markdown(f"*{wdata['pos']}*")
                st.markdown(wdata["examples"])
                st.markdown(wdata["rest"])
                st.markdown(wdata["cambridge"])
                st.markdown("---")

    st.markdown(" ")
    st.markdown(" ")
    if st.button("üîÅ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"):
        st.session_state.page = "start"
        st.session_state.view_all = False
        st.experimental_rerun()

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
elif st.session_state.page == "stats":
    st.markdown("## üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–ª–æ–≤–∞–º")
    stats = st.session_state.stats
    if stats:
        for word, data in sorted(stats.items()):
            st.markdown(f"**{word}** ‚Äî ‚úÖ {data['right']} / ‚ùå {data['wrong']}")
    else:
        st.write("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")

    if st.button("‚¨Ö –ù–∞–∑–∞–¥"):
        st.session_state.page = "start"
        st.experimental_rerun()
