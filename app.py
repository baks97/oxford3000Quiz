import streamlit as st
import random
import time

# –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
def parse_md_file(filename):
    with open(filename, encoding="utf-8") as f:
        content = f.read()

    entries = content.split("## üî§ ")[1:]
    words = []
    for entry in entries:
        lines = entry.strip().splitlines()
        if len(lines) < 3:
            continue  # –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Å—Ç—Ä–æ–∫

        word = lines[0].strip()
        transcription = lines[1].strip()
        pos = lines[2].strip()

        # –ù–∞–π—Ç–∏ –±–ª–æ–∫–∏
        examples_block = ""
        rest_block = ""
        cambridge_block = ""

        in_examples = False
        in_rest = False
        in_cambridge = False

        for line in lines[3:]:
            if line.startswith("### üßæ"):
                in_examples = True
                in_rest = in_cambridge = False
                examples_block += line + "\n"
            elif line.startswith("### üåç"):
                in_cambridge = True
                in_examples = in_rest = False
                cambridge_block += line + "\n"
            elif line.startswith("### üìò") or line.startswith("### üìå"):
                in_rest = True
                in_examples = in_cambridge = False
                rest_block += line + "\n"
            elif line.startswith("## üî§"):
                break
            else:
                if in_examples:
                    examples_block += line + "\n"
                elif in_rest:
                    rest_block += line + "\n"
                elif in_cambridge:
                    cambridge_block += line + "\n"

        words.append({
            "word": word,
            "transcription": transcription,
            "pos": pos,
            "examples": examples_block.strip(),
            "rest": rest_block.strip(),
            "cambridge": cambridge_block.strip()
        })

    return words

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
if 'page' not in st.session_state:
    st.session_state.page = 'main'
    st.session_state.words = []
    st.session_state.index = 0
    st.session_state.stats = {}
    st.session_state.test_mode = False
    st.session_state.view_all = False

# –ó–∞–≥–æ–ª–æ–≤–æ–∫
st.title("üß† –ê–Ω–≥–ª–∏–π—Å–∫–∏–π –∫–≤–∏–∑ –ø–æ —Å–ª–æ–≤–∞–º")

# –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
MD_FILE = "quiz.md"
words_all = parse_md_file(MD_FILE)

# –ì–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
if st.session_state.page == 'main':
    st.write("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:")

    # –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞
    mode = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º", ["–£—á–∏—Ç—å —Å–ª–æ–≤–∞", "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª–æ–≤"])

    if mode == "–£—á–∏—Ç—å —Å–ª–æ–≤–∞":
        st.session_state.words = random.sample(words_all, len(words_all))  # —Å–ª—É—á–∞–π–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –≤—Å–µ—Ö —Å–ª–æ–≤
        st.session_state.test_mode = False
        st.session_state.page = 'quiz'
    elif mode == "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª–æ–≤":
        st.session_state.test_mode = True
        st.session_state.page = 'test'

    st.write("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞:")

    # –í—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞
    if st.button("7 —Å–ª–æ–≤"):
        st.session_state.words = random.sample(words_all, 7)
        st.session_state.index = 0
        st.session_state.page = "test"
    elif st.button("15 —Å–ª–æ–≤"):
        st.session_state.words = random.sample(words_all, 15)
        st.session_state.index = 0
        st.session_state.page = "test"
    elif st.button("20 —Å–ª–æ–≤"):
        st.session_state.words = random.sample(words_all, 20)
        st.session_state.index = 0
        st.session_state.page = "test"
    elif st.button("25 —Å–ª–æ–≤"):
        st.session_state.words = random.sample(words_all, 25)
        st.session_state.index = 0
        st.session_state.page = "test"

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Å–µ–≥–æ —Ñ–∞–π–ª–∞
    if st.button("üìÇ –ü–æ–∫–∞–∑–∞—Ç—å –≤–µ—Å—å —Ñ–∞–π–ª"):
        st.session_state.page = "all_words"
        st.session_state.view_all = True

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–æ–≤
elif st.session_state.page == 'test':
    word = st.session_state.words[st.session_state.index]

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–ª–æ–≤–∞
    st.write(f"### {word['word']}")
    st.write(f"**–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è:** {word['transcription']}")
    st.write(f"**–ß–∞—Å—Ç—å —Ä–µ—á–∏:** {word['pos']}")

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏
    if st.button("–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É"):
        st.write(f"**–ü—Ä–∏–º–µ—Ä—ã:** {word['examples']}")
        st.write(f"**–ü–µ—Ä–µ–≤–æ–¥ (Cambridge):** {word['cambridge']}")
        st.write(f"**–û—Å—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:** {word['rest']}")

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    col1, col2 = st.columns(2)
    with col1:
        if st.button("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ"):
            st.session_state.stats[word['word']] = {"right": 1, "wrong": 0}
            st.session_state.index += 1
    with col2:
        if st.button("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ"):
            st.session_state.stats[word['word']] = {"right": 0, "wrong": 1}
            st.session_state.index += 1

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å–ª–æ–≤
    col1, col2, col3 = st.columns([1, 2, 1])
    with col1:
        if st.button("‚óÄÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–µ–µ"):
            st.session_state.index -= 1
    with col2:
        if st.button("üè† –ì–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω"):
            st.session_state.page = "main"
    with col3:
        if st.button("‚ñ∂Ô∏è –°–ª–µ–¥—É—é—â–µ–µ"):
            st.session_state.index += 1

    # –û–∫–æ–Ω—á–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞
    if st.session_state.index >= len(st.session_state.words):
        st.write(f"–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –†–µ–∑—É–ª—å—Ç–∞—Ç:")
        correct = sum([1 for stat in st.session_state.stats.values() if stat["right"] == 1])
        wrong = sum([1 for stat in st.session_state.stats.values() if stat["wrong"] == 1])
        st.write(f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct}")
        st.write(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {wrong}")
        st.write("–í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã:")
        for word, stat in st.session_state.stats.items():
            st.write(f"{word}: {'–ü—Ä–∞–≤–∏–ª—å–Ω–æ' if stat['right'] == 1 else '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ'}")

# –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ–≥–æ —Ñ–∞–π–ª–∞
elif st.session_state.page == 'all_words':
    st.write("–í—Å–µ —Å–ª–æ–≤–∞:")
    for word in sorted(words_all, key=lambda x: x['word']):
        st.write(f"### {word['word']}")
        st.write(f"**–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è:** {word['transcription']}")
        st.write(f"**–ß–∞—Å—Ç—å —Ä–µ—á–∏:** {word['pos']}")
        st.write(f"**–ü—Ä–∏–º–µ—Ä—ã:** {word['examples']}")
        st.write(f"**–ü–µ—Ä–µ–≤–æ–¥ (Cambridge):** {word['cambridge']}")
        st.write(f"**–û—Å—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:** {word['rest']}")
